{"version":3,"sources":["../src/index.js"],"names":["signInData","withSignedInUser","fn","Error","setLoginToken","token","getLoginToken","password","login","apiURIs","body","JSON","stringify","grant_type","client_id","client_secret","method","headers","REQUEST_HEADERS_SAUCE","then","res","json","data","getCustomer","customers","Authorization","access_token","getCustomerAccount","_links","account","href","getWholeFeed","events","getBillByMonth","bills_summary","theBill","bills","find","bill","summary","open_date","indexOf","monthFilter","self","getCheckingBalance","graphql","fs","readFileSync","path","join","__dirname","ghostflame","query","getCheckingTransactions"],"mappings":"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","file":"index.js","sourcesContent":["import fetch from 'node-fetch'\nimport fs from 'fs'\nimport path from 'path'\nimport { isEmpty } from 'lodash'\nimport apiURIs from './api_uris'\n\n/* eslint-disable quote-props */\nexport const REQUEST_HEADERS_SAUCE = {\n  'Content-Type': 'application/json',\n  'X-Correlation-Id': 'WEB-APP.jO4x1',\n  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36',\n  'Origin': 'https://conta.nubank.com.br',\n  'Referer': 'https://conta.nubank.com.br/',\n}\n/* eslint-enable quote-props */\n\nexport default function(){\n  let signInData = {}\n\n  function withSignedInUser(fn){\n    return (...args) => {\n      if(isEmpty(signInData)){\n        throw new Error('[NuBank] You must sign in first')\n      }\n\n      return fn(...args)\n    }\n  }\n\n  return {\n    setLoginToken: (token) => { signInData = token },\n    getLoginToken: ({ password, login }) => (\n      fetch(apiURIs.token, {\n        body: JSON.stringify({\n          password,\n          login,\n          grant_type: 'password',\n          client_id: 'other.conta',\n          client_secret: 'yQPeLzoHuJzlMMSAjC-LgNUJdUecx8XO',\n        }),\n        method: 'POST',\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n        },\n      })\n        .then(res => res.json())\n        /* eslint-disable no-return-assign */\n        .then(data => signInData = data)\n        /* eslint-enable no-return-assign */\n    ),\n\n    /**\n     * Fetches user related data\n     * @return {object} customer\n    */\n    @withSignedInUser\n    getCustomer: () => (\n      fetch(apiURIs.customers, {\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n      })\n        .then(res => res.json())\n    ),\n\n    /**\n     * Fetches credit card account related data\n     * @return {object} account\n    */\n    @withSignedInUser\n    getCustomerAccount: () => (\n      fetch(signInData._links.account.href, {\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n      })\n        .then(res => res.json())\n    ),\n\n    /**\n     * Fetches all transaction history since the very beginning\n     * @returns {object} history\n    */\n    @withSignedInUser\n    getWholeFeed: () => (\n      fetch(signInData._links.events.href, {\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n      }).then(res => res.json())\n    ),\n\n    /**\n     * Fetches all transactions from bill on specific month\n     * @returns {object} history\n    */\n    @withSignedInUser\n    getBillByMonth: monthFilter => (\n      fetch(signInData._links.bills_summary.href, {\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n      })\n        .then(res => res.json())\n        .then((json) => {\n          const theBill = json.bills.find(bill => bill.summary.open_date.indexOf(monthFilter) !== -1)\n\n          return fetch(theBill._links.self.href, {\n            headers: {\n              ...REQUEST_HEADERS_SAUCE,\n              Authorization: `Bearer ${signInData.access_token}`,\n            },\n          })\n        })\n        .then(res => res.json())\n    ),\n\n    @withSignedInUser\n    getCheckingBalance: () => {\n      const graphql = fs.readFileSync(path.join(__dirname, 'queries', 'account_balance.gql'), 'utf8')\n\n      return fetch(signInData._links.ghostflame.href, {\n        method: 'POST',\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n        body: JSON.stringify({ query: graphql }),\n      })\n        .then(res => res.json())\n    },\n\n    @withSignedInUser\n    getCheckingTransactions: () => {\n      const graphql = fs.readFileSync(path.join(__dirname, 'queries', 'account_feed.gql'), 'utf8')\n\n      return fetch(signInData._links.ghostflame.href, {\n        method: 'POST',\n        headers: {\n          ...REQUEST_HEADERS_SAUCE,\n          Authorization: `Bearer ${signInData.access_token}`,\n        },\n        body: JSON.stringify({ query: graphql }),\n      })\n        .then(res => res.json())\n    },\n\n    get signInData() { return signInData },\n  }\n}\n"]}